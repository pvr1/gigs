openapi: 3.0.1
info:
  contact:
    email: per.von.rosen@gmail.com
  description: This is the Gigs workforce api. Use to search for workforce or search
    for a gig
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: pvr
  title: Gigs workforce api
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
#- url: https://127.0.0.1.nip.io:8080/v2
- url: http://127.0.0.1.nip.io:8080/v2
tags:
- description: Everything about your future Gigs
  externalDocs:
    description: Find out more
    url: http://swagger.io
  name: gigs
- description: Access to Gigstore orders
  name: gigs orders
- description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
  name: gig worker
paths:
  /gigs:
    post:
      operationId: addGig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gig'
          application/xml:
            schema:
              $ref: '#/components/schemas/Gig'
        description: Gig object that needs to be added to the store
        required: true
      responses:
        "405":
          content: {}
          description: Invalid input
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: Add a new gig to the store
      tags:
      - gig
      x-codegen-request-body-name: body
    put:
      operationId: updateGig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gig'
          application/xml:
            schema:
              $ref: '#/components/schemas/Gig'
        description: Gig object that needs to be added to the store
        required: true
      responses:
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Gig not found
        "405":
          content: {}
          description: Validation exception
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: Update an existing gig
      tags:
      - gigs
      x-codegen-request-body-name: body
  /gig/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findGigsByStatus
      parameters:
      - description: Status values that need to be considered for filter
        explode: true
        in: query
        name: status
        required: true
        schema:
          items:
            default: available
            enum:
            - available
            - pending
            - sold
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Gig'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Gig'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid status value
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: Finds Gigs by status
      tags:
      - gig
  /gig/findByTags:
    get:
      deprecated: true
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findGigsByTags
      parameters:
      - description: Tags to filter by
        explode: true
        in: query
        name: tags
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Gig'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Gig'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid tag value
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: Finds Gigs by tags
      tags:
      - gig
  /gig/{gigId}:
    delete:
      operationId: deleteGig
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Gig id to delete
        explode: false
        in: path
        name: gigId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Gig not found
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: Deletes a gig
      tags:
      - gig
    get:
      description: Returns a single gig
      operationId: getGigById
      parameters:
      - description: ID of gig to return
        explode: false
        in: path
        name: gigId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Gig'
            application/json:
              schema:
                $ref: '#/components/schemas/Gig'
          description: successful operation
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Gig not found
      security:
      - api_key: []
      summary: Find gig by ID
      tags:
      - gig
    post:
      operationId: updateGigWithForm
      parameters:
      - description: ID of gig that needs to be updated
        explode: false
        in: path
        name: gigId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: Updated name of the gig
                  type: string
                status:
                  description: Updated status of the gig
                  type: string
      responses:
        "405":
          content: {}
          description: Invalid input
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: Updates a gig in the store with form data
      tags:
      - gig
  /gig/{gigId}/uploadImage:
    post:
      operationId: uploadFile
      parameters:
      - description: ID of gig to update
        explode: false
        in: path
        name: gigId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  description: Additional data to pass to server
                  type: string
                file:
                  description: file to upload
                  format: binary
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
      - gigstore_auth:
        - write:gigs
        - read:gigs
      summary: uploads an image
      tags:
      - gig
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
      - api_key: []
      summary: Returns gig inventories by status
      tags:
      - store
  /store/order:
    post:
      operationId: placeOrder
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the gig
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          content: {}
          description: Invalid Order
      summary: Place an order for a gig
      tags:
      - store
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - description: ID of the order that needs to be deleted
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          minimum: 1.0
          type: integer
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - description: ID of gig that needs to be fetched
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          maximum: 10.0
          minimum: 1.0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Order not found
      summary: Find purchase order by ID
      tags:
      - store
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          content: {}
          description: successful operation
      summary: Create user
      tags:
      - user
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      operationId: createUsersWithArrayInput
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/User'
              type: array
        description: List of user object
        required: true
      responses:
        default:
          content: {}
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      operationId: createUsersWithListInput
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/User'
              type: array
        description: List of user object
        required: true
      responses:
        default:
          content: {}
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-codegen-request-body-name: body
  /user/login:
    get:
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          content: {}
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
  /user/logout:
    get:
      operationId: logoutUser
      responses:
        default:
          content: {}
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid username supplied
        "404":
          content: {}
          description: User not found
      summary: Delete user
      tags:
      - user
    get:
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          content: {}
          description: Invalid username supplied
        "404":
          content: {}
          description: User not found
      summary: Get user by user name
      tags:
      - user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be updated
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "400":
          content: {}
          description: Invalid user supplied
        "404":
          content: {}
          description: User not found
      summary: Updated user
      tags:
      - user
      x-codegen-request-body-name: body
components:
  schemas:
    Order:
      example:
        quantity: 1
        id: 0
        gigId: 6
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      properties:
        id:
          format: int64
          type: integer
        gigId:
          format: int64
          type: integer
        quantity:
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          type: string
        complete:
          default: false
          type: boolean
      type: object
      xml:
        name: Order
    Category:
      example:
        name: name
        id: 6
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: Category
    User:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          format: int32
          type: integer
      type: object
      xml:
        name: User
    Tag:
      example:
        name: name
        id: 1
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: Tag
    Gig:
      example:
        name: The gig's catchy name - e.g. "write golang webstore"
        measurableoutcome:
        - measurableoutcome
        - measurableoutcome
        description:
        - description
        - description
        id: 0
        category:
          name: name
          id: 6
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        status: available
      properties:
        id:
          format: int64
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        name:
          example: The gig's catchy name - e.g. "write golang webstore"
          type: string
        description:
          items:
            type: string
          type: array
          xml:
            name: description
            wrapped: true
        measurableoutcome:
          items:
            type: string
          type: array
          xml:
            name: measurableoutcome
            wrapped: true
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          xml:
            name: tag
            wrapped: true
        status:
          description: gig status in the store
          enum:
          - available
          - pending
          - sold
          type: string
      required:
      - description
      - measurableoutcome
      - name
      type: object
      xml:
        name: Gig
    ApiResponse:
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object
  securitySchemes:
    gigstore_auth:
      flows:
        implicit:
          authorizationUrl: http://gigstore.swagger.io/oauth/dialog
          scopes:
            write:gigs: modify gigs in your account
            read:gigs: read your gigs
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
